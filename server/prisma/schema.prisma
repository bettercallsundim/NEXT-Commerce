generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]

  output = "../../shared/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  role      Role       @default(CUSTOMER)
  avatar    String?
  address   String?
  wishlist  Product[]
  cart      CartItem[]
  orders    Order[]
  reviews   Review[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Vendor    Vendor[]
}

enum Role {
  CUSTOMER
  ADMIN
  VENDOR // Added to differentiate vendors from customers
}

model Vendor {
  id          String    @id @default(uuid())
  name        String
  description String?
  logo        String?
  products    Product[]
  orders      Order[] // Relation to orders associated with this vendor

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)
  user      User    @relation(fields: [userId], references: [id])
  userId    String
}

model Category {
  id           String     @id @default(uuid())
  name         String
  description  String?
  iconUrl      String?
  iconPublicId String?
  products     Product[]  @relation("CategoryProducts")
  parent       Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  parentId     String?
  childrens    Category[] @relation("CategoryParent")
  brands       Brand[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String  @id @default(uuid())
  url       String
  publicId  String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Color {
  id        String  @id @default(uuid())
  name      String
  code      String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Size {
  id        String   @id @default(uuid())
  value     SizeEnum
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Order {
  id          String      @id @default(uuid())
  products    OrderItem[]
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  vendor      Vendor      @relation(fields: [vendorId], references: [id]) // Relation to Vendor
  vendorId    String // Vendor ID for each order
  address     String
  phone       String
  totalPrice  Float
  orderStatus OrderStatus @default(PENDING)
  deliveredAt DateTime?
  paidAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)
  color     String?
  size      String?
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Review {
  id        String  @id @default(uuid())
  rating    Int
  comment   String?
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Product {
  id             String    @id @default(uuid())
  name           String
  description    String
  price          Float
  category       Category  @relation("CategoryProducts", fields: [categoryId], references: [id])
  categoryId     String
  images         Image[]
  colors         Color[]
  sizes          Size[]
  brand          Brand     @relation(fields: [brandId], references: [id])
  brandId        String
  stock          Int
  sold           Int       @default(0)
  rating         Float     @default(0)
  reviews        Review[]
  material       String?
  style          String?
  gender         Gender    @default(UNISEX)
  releaseDate    DateTime?
  limitedEdition Boolean   @default(false)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  vendor    Vendor      @relation(fields: [vendorId], references: [id])
  vendorId  String
  CartItem  CartItem[]
  OrderItem OrderItem[]
  User      User?       @relation(fields: [userId], references: [id])
  userId    String?
}

enum SizeEnum {
  XS
  S
  N
  M
  L
  XL
  XXL
}

model Brand {
  id         String    @id @default(uuid())
  name       String
  products   Product[]
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

enum Gender {
  MEN
  WOMEN
  UNISEX
}
